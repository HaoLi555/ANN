Model(
  (model): Sequential(
    (fc1): Linear(in_features=3072, out_features=1024, bias=True)
    (bn): BatchNorm1d()
    (relu): ReLU()
    (dropout): Dropout()
    (fc2): Linear(in_features=1024, out_features=10, bias=True)
  )
  (loss): CrossEntropyLoss()
)
Traceback (most recent call last):
  File "/home/haoooooooooooookkkkk/sophomore_autumn/ANN/HW2/codes/mlp/main.py", line 140, in <module>
    train_acc, train_loss = train_epoch(mlp_model, X_train, y_train, optimizer)
  File "/home/haoooooooooooookkkkk/sophomore_autumn/ANN/HW2/codes/mlp/main.py", line 78, in train_epoch
    loss_, acc_ = model(X_batch, y_batch)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/haoooooooooooookkkkk/sophomore_autumn/ANN/HW2/codes/mlp/model.py", line 80, in forward
    logits = self.model(x)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/container.py", line 215, in forward
    input = module(input)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/haoooooooooooookkkkk/anaconda3/envs/ANN1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/haoooooooooooookkkkk/sophomore_autumn/ANN/HW2/codes/mlp/model.py", line 54, in forward
    mask=torch.bernoulli(torch.zeros(input.shape), 1-self.p, device=input.device)/(1-self.p)
TypeError: bernoulli() received an invalid combination of arguments - got (Tensor, float, device=torch.device), but expected one of:
 * (Tensor input, *, torch.Generator generator, Tensor out)
 * (Tensor input, float p, *, torch.Generator generator)